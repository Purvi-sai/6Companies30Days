class Solution {
public:
    bool canFinish(int n, vector<vector<int>>& p) {
        if(p.size()==0) return true; 
        
        vector<int> indegree(n, 0); 
        vector<vector<int>> graph(n); 
        
        for(auto &x : p){
            graph[x[1]].push_back(x[0]);
            indegree[x[0]]++;
        }
        
        queue<int> q;
        for(int i=0; i<n; i++){
            if(indegree[i]==0) q.push(i), indegree[i]--;
        }
        if(q.size()==0) return false; 
        
        int count = 0; 
        while(!q.empty()){
            int size = q.size();
            
            for(int i=0; i<size; i++){
                int curr = q.front(); q.pop();
                count++;
                for(auto child : graph[curr]){
                    indegree[child]--;  
                    if(indegree[child]==0) q.push(child);
                }
            }   
        }
        if(count==n) return true;
        return false;
    }
};
